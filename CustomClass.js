//import { v5 } from 'uuid';

class CustomClass extends Array {
    constructor(array) {
        super();
        for (var i in array) {
            this.push(array[i]);
        }
    }

    toString() {
        return this.join(' ').trim();
    }

    static didHotUpdateWarn = false;
}

/*
const uuid = "31a5ca34-d1cc-439d-bf72-ab35e184fee3";

let create = (...array) => {
    return new CustomClass(array);
}

function getClassNames(css) {
    let regex = /([.]+)([a-zA-Z0-9-_]+)([:]*)([a-zA-Z0-9-_(.#)]*)([ ]*[{]{1})(\w|\W|\s|\S)[^}]*([}]{1})/gm;
    let classNames = [...css.matchAll(regex)].map(x => x[2]);
    return classNames;
}

function camelize(str) {
    let arr = str.split('-');
    let capital = arr.map((item, index) => index ? item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() : item.toLowerCase());
    // ^-- change here.
    let capitalString = capital.join("");
    return capitalString;
}

create.__proto__.class = (css, source = null, userOptions = null) => {
    let options = userOptions ?? {
        embedTruthTable: false,
        convertCamelCase: true,
        hotUpdate: true
    };
    if (source === null) {
        source = `anon${Math.round(Math.random() * 1000)}`
    }
    let originalSourceNames = getClassNames(css);
    let processedCss = css;
    let classTruthTable = {};
    originalSourceNames.forEach((name) => {
        let originalName = name;
        if (options.convertCamelCase && name.includes('-')) {
            name = camelize(name);
        }
        // Following this convention:
        // .source_class__hash
        // ex: .main_button__D4A5B23663CD
        let classHash = v5(`${source}_${name}`, uuid).split('-').splice(2).join('');
        let newClassName = `${source}_${name}__saffron_${classHash}`;
        let replace = new RegExp(`${originalName}(?=[: ])`, "gm");
        processedCss = processedCss.replace(replace, newClassName);
        classTruthTable[name] = newClassName;
    });
    processedCss += "\n/*Generated By: MicroART Saffron/";
    if (typeof window !== 'undefined') {
        // Warning

        if (options.hotUpdate && !CustomClass.didHotUpdateWarn) {
            console.warn("Saffron: CSS hot updating is not supported in the current environment, saffron will default to the standard 'css-merge' functionality");
            console.groupCollapsed("Complete Warning Information");
            console.log(`Hot update allows developers to easily see code changes in their website. With hot update Saffron internally uses the same style node in the HTML to reduce repeated code. This speeds up development of large pages with thousands of css rules`);
            console.log(`The second (not-recommended) option is using 'css-merge'. With 'css-merge' Saffron will create duplicates of the style node each time the page is HOT updated. Note: If the page is refreshed then the style nodes do not stay duplicated. This functionality is only relevant to development builds of React or Next apps.`);
            console.groupEnd();
            CustomClass.didHotUpdateWarn = true;
        }

        //
        let head = document.head || document.getElementsByTagName('head')[0];
        let styleNode = document.createElement('style');
        head.appendChild(styleNode);
        styleNode.type = 'text/css';
        if (styleNode.styleSheet) {
            // This is required for IE8 and below.
            styleNode.styleSheet.cssText = css;
        } else {
            styleNode.appendChild(document.createTextNode(processedCss));
        }
        if (options.embedTruthTable) {
            styleNode.setAttribute(
                "data-truthtable",
                Buffer.from(
                    JSON.stringify(
                        classTruthTable
                    )
                ).toString(
                    'base64'
                )
            );
            styleNode.id = source;
        }
        classTruthTable.__node__ = styleNode;
        let _saffronDOM_removeNodeJ = () => {
            styleNode.parentElement?.removeChild(styleNode);
        }
        classTruthTable.destroy = () => {
            _saffronDOM_removeNodeJ();
            return true;
        }
    }
    return classTruthTable;
}

create.__proto__.load = (cssFile) => {
    return require('css-to-string-loader!css-loader!' + cssFile);
}
*/
export default function c(...array) {
    let j = [];
    for (var i in array) {
        j.push(array[i]);
    }
    return j.join(" ").trim();
};